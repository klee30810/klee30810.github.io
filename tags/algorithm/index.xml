<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on Kevin&#39;s Codex</title>
    <link>https://klee30810.github.io/tags/algorithm/</link>
    <description>Recent content in algorithm on Kevin&#39;s Codex</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Tue, 09 Nov 2021 23:17:00 +0900</lastBuildDate><atom:link href="https://klee30810.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dynamic Programming</title>
      <link>https://klee30810.github.io/compu/algorithm/oh/dp/</link>
      <pubDate>Tue, 09 Nov 2021 23:17:00 +0900</pubDate>
      
      <guid>https://klee30810.github.io/compu/algorithm/oh/dp/</guid>
      <description>Dynamic Programming Part 1  Motivation  피보나치 수열 : Recursion 사용 시 많은 계산이 중복됨  f(7) 계산을 위해서는 f(6), f(5) .... 다 계산해야 함   1 2 3 4 5 6 7  int fib(int n) { if (n==1 || n==2) return 1; else return fib(n-2) + fib(n-1); }    Memoization : 중간 결과를 caching 함으로써 중복 계산을 피함, 이미 계산된 결과를 기억해 둠, Top-down, 실제로 필요한 subproblem만 품  1 2 3 4 5 6 7 8 9 10 11 12  int fib(int n) { if (n==1 || n==2) return 1; else if (f[n] &amp;gt; -1) // 배열 f가 -1으로 초기화되어 있다고 가정  return f[n]; // 이미 계산된 값  else { f[n] = fib(n-2) + fib(n-1); // 중간 결과 버리지 않고 caching  return f[n]; } }    Bottom-up 방식 : 초반 계산이 이미 이루어져 있음, recursion에 수반되는 overhead가 없다  1 2 3 4 5 6 7  int fib(int n) { f[1] = f[2]=1; for (int i=3; i&amp;lt;=n; i++) f[n] = f[n-1] + f[n-2]; return f[n]; }    ex) Binomial Coefficient  1 2 3 4 5 6 7  int binomial(int n, int k) { if (n==k || k==0) return 1; else return binomial(n-1, k) + binomical(n-1, k-1); }    recursion : base가 있고 결국 해당 base에 도착하는 조건  → n &amp;amp; k에 의해 정해지므로 배열은 2D 형태</description>
    </item>
    
  </channel>
</rss>
